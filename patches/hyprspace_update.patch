diff --git a/flake.lock b/flake.lock
index 53a06ae..7a345e1 100644
--- a/flake.lock
+++ b/flake.lock
@@ -16,11 +16,11 @@
         ]
       },
       "locked": {
-        "lastModified": 1712434681,
-        "narHash": "sha256-qwmR2p1oc48Bj7gUDvb1oGL19Rjs2PmEmk4ChV01A5o=",
+        "lastModified": 1713612213,
+        "narHash": "sha256-zJboXgWNpNhKyNF8H/3UYzWkx7w00TOCGKi3cwi+tsw=",
         "owner": "hyprwm",
         "repo": "hyprcursor",
-        "rev": "818d8c4b69e0997483d60b75f701fe14b561a7a3",
+        "rev": "cab4746180f210a3c1dd3d53e45c510e309e90e1",
         "type": "github"
       },
       "original": {
@@ -34,17 +34,18 @@
         "hyprcursor": "hyprcursor",
         "hyprland-protocols": "hyprland-protocols",
         "hyprlang": "hyprlang",
+        "hyprwayland-scanner": "hyprwayland-scanner",
         "nixpkgs": "nixpkgs",
         "systems": "systems",
         "wlroots": "wlroots",
         "xdph": "xdph"
       },
       "locked": {
-        "lastModified": 1713376910,
-        "narHash": "sha256-6cvw+CxacXe+l8/mZ1+ih21vLHvhIC+Erc7LQF0dyrQ=",
+        "lastModified": 1714220844,
+        "narHash": "sha256-FDtNkt6gfgPrByBuVgCcGxZyv9uwmFNS5qoBJbmDSDY=",
         "owner": "hyprwm",
         "repo": "Hyprland",
-        "rev": "82222342f10a7eff0ec9be972153e740d0f95213",
+        "rev": "e400a288d0f8ef75672cb201203b857b65b782bb",
         "type": "github"
       },
       "original": {
@@ -90,11 +91,11 @@
         ]
       },
       "locked": {
-        "lastModified": 1711671891,
-        "narHash": "sha256-C/Wwsy/RLxHP1axFFl+AnwJRWfd8gxDKKoa8nt8Qk3c=",
+        "lastModified": 1713121246,
+        "narHash": "sha256-502X0Q0fhN6tJK7iEUA8CghONKSatW/Mqj4Wappd++0=",
         "owner": "hyprwm",
         "repo": "hyprlang",
-        "rev": "c1402612146ba06606ebf64963a02bc1efe11e74",
+        "rev": "78fcaa27ae9e1d782faa3ff06c8ea55ddce63706",
         "type": "github"
       },
       "original": {
@@ -103,13 +104,38 @@
         "type": "github"
       }
     },
+    "hyprwayland-scanner": {
+      "inputs": {
+        "nixpkgs": [
+          "hyprland",
+          "nixpkgs"
+        ],
+        "systems": [
+          "hyprland",
+          "systems"
+        ]
+      },
+      "locked": {
+        "lastModified": 1714171579,
+        "narHash": "sha256-eaWDIvt8ufUKKz3Lc2a3PyemLJG1m9RYlF+HP3hWbaw=",
+        "owner": "hyprwm",
+        "repo": "hyprwayland-scanner",
+        "rev": "126dad854f22fe30e6b82cd21808e76903d90ac5",
+        "type": "github"
+      },
+      "original": {
+        "owner": "hyprwm",
+        "repo": "hyprwayland-scanner",
+        "type": "github"
+      }
+    },
     "nixpkgs": {
       "locked": {
-        "lastModified": 1712439257,
-        "narHash": "sha256-aSpiNepFOMk9932HOax0XwNxbA38GOUVOiXfUVPOrck=",
+        "lastModified": 1713714899,
+        "narHash": "sha256-+z/XjO3QJs5rLE5UOf015gdVauVRQd2vZtsFkaXBq2Y=",
         "owner": "NixOS",
         "repo": "nixpkgs",
-        "rev": "ff0dbd94265ac470dda06a657d5fe49de93b4599",
+        "rev": "6143fc5eeb9c4f00163267708e26191d1e918932",
         "type": "github"
       },
       "original": {
@@ -142,17 +168,17 @@
     "wlroots": {
       "flake": false,
       "locked": {
-        "lastModified": 1713124002,
-        "narHash": "sha256-vPeZCY+sdiGsz4fl3AVVujfyZyQBz6+vZdkUE4hQ+HI=",
+        "lastModified": 1713731601,
+        "narHash": "sha256-bdcKdtLkusvv85DNuJsajZLFeq7bXp+x5AGP1Sd4wD8=",
         "owner": "hyprwm",
         "repo": "wlroots-hyprland",
-        "rev": "611a4f24cd2384378f6e500253983107c6656c64",
+        "rev": "5c1d51c5a2793480f5b6c4341ad0797052aec2ea",
         "type": "github"
       },
       "original": {
         "owner": "hyprwm",
         "repo": "wlroots-hyprland",
-        "rev": "611a4f24cd2384378f6e500253983107c6656c64",
+        "rev": "5c1d51c5a2793480f5b6c4341ad0797052aec2ea",
         "type": "github"
       }
     },
@@ -176,11 +202,11 @@
         ]
       },
       "locked": {
-        "lastModified": 1709299639,
-        "narHash": "sha256-jYqJM5khksLIbqSxCLUUcqEgI+O2LdlSlcMEBs39CAU=",
+        "lastModified": 1713724432,
+        "narHash": "sha256-dtU1y4oj/0Y42oauzm93ucFg1AoqETnQ21bmXTIUng0=",
         "owner": "hyprwm",
         "repo": "xdg-desktop-portal-hyprland",
-        "rev": "2d2fb547178ec025da643db57d40a971507b82fe",
+        "rev": "9ace6f969ce495185df34cc6254fb9d297765478",
         "type": "github"
       },
       "original": {
diff --git a/src/Globals.hpp b/src/Globals.hpp
index 4c11272..c65a129 100644
--- a/src/Globals.hpp
+++ b/src/Globals.hpp
@@ -9,7 +9,7 @@ inline HANDLE pHandle = NULL;
 typedef void (*tMouseKeybind)(std::string);
 extern void* pMouseKeybind;
 
-typedef void (*tRenderWindow)(void*, CWindow*, CMonitor*, timespec*, bool, eRenderPassMode, bool, bool);
+typedef void (*tRenderWindow)(void*, PHLWINDOW, CMonitor*, timespec*, bool, eRenderPassMode, bool, bool);
 extern void* pRenderWindow;
 typedef void (*tRenderLayer)(void*, SLayerSurface*, CMonitor*, timespec*, bool);
 extern void* pRenderLayer;
diff --git a/src/Input.cpp b/src/Input.cpp
index 747f46e..c99661b 100644
--- a/src/Input.cpp
+++ b/src/Input.cpp
@@ -36,9 +36,9 @@ bool CHyprspaceWidget::buttonEvent(bool pressed, Vector2D coords) {
     // if the cursor is hovering over workspace, clicking should switch workspace instead of starting window drag
     if (Config::autoDrag && (targetWorkspace == nullptr || !pressed)) {
         // when overview is active, always drag windows on mouse click
-        if (g_pInputManager->currentlyDraggedWindow) {
+        if (!g_pInputManager->currentlyDraggedWindow.expired()) {
             g_pLayoutManager->getCurrentLayout()->onEndDragWindow();
-            g_pInputManager->currentlyDraggedWindow = nullptr;
+            g_pInputManager->currentlyDraggedWindow.reset();
             g_pInputManager->dragMode = MBIND_INVALID;
         }
         std::string keybind = (pressed ? "1" : "0") + std::string("movewindow");
@@ -47,12 +47,13 @@ bool CHyprspaceWidget::buttonEvent(bool pressed, Vector2D coords) {
     Return = false;
 
     // release window on workspace to drop it in
-    if (targetWindow && targetWorkspace != nullptr && !pressed) {
-        g_pCompositor->moveWindowToWorkspaceSafe(targetWindow, targetWorkspace);
-        if (targetWindow->m_bIsFloating) {
-            auto targetPos = getOwner()->vecPosition + (getOwner()->vecSize / 2.) - (targetWindow->m_vReportedSize / 2.);
-            targetWindow->m_vPosition = targetPos;
-            targetWindow->m_vRealPosition = targetPos;
+    if (!targetWindow.expired() && targetWorkspace != nullptr && !pressed) {
+        const auto targetWindowLocked = targetWindow.lock();
+        g_pCompositor->moveWindowToWorkspaceSafe(targetWindowLocked, targetWorkspace);
+        if (targetWindowLocked->m_bIsFloating) {
+            auto targetPos = getOwner()->vecPosition + (getOwner()->vecSize / 2.) - (targetWindowLocked->m_vReportedSize / 2.);
+            targetWindowLocked->m_vPosition = targetPos;
+            targetWindowLocked->m_vRealPosition = targetPos;
         }
         if (Config::switchOnDrop) {
             g_pCompositor->getMonitorFromID(targetWorkspace->m_iMonitorID)->changeWorkspace(targetWorkspace->m_iID);
diff --git a/src/Overview.cpp b/src/Overview.cpp
index 3fc8725..4ed9ee9 100644
--- a/src/Overview.cpp
+++ b/src/Overview.cpp
@@ -40,7 +40,7 @@ void CHyprspaceWidget::show() {
                     // fixes youtube fullscreen not restoring properly
                     if (ws->m_efFullscreenMode == FULLSCREEN_FULL) w->m_bFakeFullscreenState = true;
                     // we use the getWindowFromHandle function to prevent dangling pointers
-                    prevFullscreen.emplace_back(std::make_tuple((uint32_t)(((uint64_t)w) & 0xFFFFFFFF), ws->m_efFullscreenMode));
+                    prevFullscreen.emplace_back(std::make_tuple((uint32_t)(((uint64_t)w.get()) & 0xFFFFFFFF), ws->m_efFullscreenMode));
                     g_pCompositor->setWindowFullscreen(w, false);
                 }
             }
diff --git a/src/Render.cpp b/src/Render.cpp
index c247e10..2c077d7 100644
--- a/src/Render.cpp
+++ b/src/Render.cpp
@@ -1,7 +1,7 @@
 #include "Overview.hpp"
 #include "Globals.hpp"
 
-void renderWindowStub(CWindow* pWindow, CMonitor* pMonitor, PHLWORKSPACE pWorkspaceOverride, CBox rectOverride, timespec* time) {
+void renderWindowStub(PHLWINDOW pWindow, CMonitor* pMonitor, PHLWORKSPACE pWorkspaceOverride, CBox rectOverride, timespec* time) {
     if (!pWindow || !pMonitor || !pWorkspaceOverride || !time) return;
 
     const auto oWorkspace = pWindow->m_pWorkspace;
@@ -244,14 +244,14 @@ void CHyprspaceWidget::draw() {
                     CBox curWindowBox = {wX, wY, wW, wH};
                     g_pHyprOpenGL->m_RenderData.clipBox = curWorkspaceBox;
                     //g_pHyprOpenGL->renderRectWithBlur(&curWindowBox, CColor(0, 0, 0, 0));
-                    renderWindowStub(w.get(), owner, owner->activeWorkspace, curWindowBox, &time);
+                    renderWindowStub(w, owner, owner->activeWorkspace, curWindowBox, &time);
                     g_pHyprOpenGL->m_RenderData.clipBox = CBox();
                 }
             }
             // draw floating windows
             for (auto& w : g_pCompositor->m_vWindows) {
                 if (!w) continue;
-                if (w->m_pWorkspace == ws && w->m_bIsFloating && ws->getLastFocusedWindow() != w.get()) {
+                if (w->m_pWorkspace == ws && w->m_bIsFloating && ws->getLastFocusedWindow() != w) {
                     double wX = curWorkspaceRectOffsetX + ((w->m_vRealPosition.value().x - owner->vecPosition.x) * monitorSizeScaleFactor * owner->scale);
                     double wY = curWorkspaceRectOffsetY + ((w->m_vRealPosition.value().y - owner->vecPosition.y) * monitorSizeScaleFactor * owner->scale);
                     double wW = w->m_vRealSize.value().x * monitorSizeScaleFactor * owner->scale;
@@ -260,14 +260,14 @@ void CHyprspaceWidget::draw() {
                     CBox curWindowBox = {wX, wY, wW, wH};
                     g_pHyprOpenGL->m_RenderData.clipBox = curWorkspaceBox;
                     //g_pHyprOpenGL->renderRectWithBlur(&curWindowBox, CColor(0, 0, 0, 0));
-                    renderWindowStub(w.get(), owner, owner->activeWorkspace, curWindowBox, &time);
+                    renderWindowStub(w, owner, owner->activeWorkspace, curWindowBox, &time);
                     g_pHyprOpenGL->m_RenderData.clipBox = CBox();
                 }
             }
             // draw last focused floating window on top
             if (ws->getLastFocusedWindow())
                 if (ws->getLastFocusedWindow()->m_bIsFloating) {
-                    CWindow* w = ws->getLastFocusedWindow();
+                    PHLWINDOW w = ws->getLastFocusedWindow();
                     double wX = curWorkspaceRectOffsetX + ((w->m_vRealPosition.value().x - owner->vecPosition.x) * monitorSizeScaleFactor * owner->scale);
                     double wY = curWorkspaceRectOffsetY + ((w->m_vRealPosition.value().y - owner->vecPosition.y) * monitorSizeScaleFactor * owner->scale);
                     double wW = w->m_vRealSize.value().x * monitorSizeScaleFactor * owner->scale;
diff --git a/src/main.cpp b/src/main.cpp
index 06f3123..f43cb2e 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -118,9 +118,10 @@ void onRender(void* thisptr, SCallbackInfo& info, std::any args) {
         if (widget != nullptr)
             if (widget->getOwner()) {
                 //widget->draw();
-                if (g_pInputManager->currentlyDraggedWindow && widget->isActive()) {
-                    g_oAlpha = g_pInputManager->currentlyDraggedWindow->m_fActiveInactiveAlpha.goal();
-                    g_pInputManager->currentlyDraggedWindow->m_fActiveInactiveAlpha.setValueAndWarp(0); // HACK: hide dragged window for the actual pass
+                if (!g_pInputManager->currentlyDraggedWindow.expired() && widget->isActive()) {
+                    const auto currentlyDraggedWindowLocked = g_pInputManager->currentlyDraggedWindow.lock();
+                    g_oAlpha = currentlyDraggedWindowLocked->m_fActiveInactiveAlpha.goal();
+                    currentlyDraggedWindowLocked->m_fActiveInactiveAlpha.setValueAndWarp(0); // HACK: hide dragged window for the actual pass
                 }
                 else g_oAlpha = -1;
             }
@@ -135,12 +136,13 @@ void onRender(void* thisptr, SCallbackInfo& info, std::any args) {
         if (widget != nullptr)
             if (widget->getOwner()) {
                 widget->draw();
-                if (g_oAlpha != -1 && g_pInputManager->currentlyDraggedWindow) {
-                    g_pInputManager->currentlyDraggedWindow->m_fActiveInactiveAlpha.setValueAndWarp(Config::dragAlpha);
+                if (g_oAlpha != -1 && !g_pInputManager->currentlyDraggedWindow.expired()) {
+                    const auto currentlyDraggedWindowLocked = g_pInputManager->currentlyDraggedWindow.lock();
+                    currentlyDraggedWindowLocked->m_fActiveInactiveAlpha.setValueAndWarp(Config::dragAlpha);
                     timespec time;
                     clock_gettime(CLOCK_MONOTONIC, &time);
-                    (*(tRenderWindow)pRenderWindow)(g_pHyprRenderer.get(), g_pInputManager->currentlyDraggedWindow, widget->getOwner(), &time, true, RENDER_PASS_MAIN, false, false);
-                    g_pInputManager->currentlyDraggedWindow->m_fActiveInactiveAlpha.setValueAndWarp(g_oAlpha);
+                    (*(tRenderWindow)pRenderWindow)(g_pHyprRenderer.get(), currentlyDraggedWindowLocked, widget->getOwner(), &time, true, RENDER_PASS_MAIN, false, false);
+                    currentlyDraggedWindowLocked->m_fActiveInactiveAlpha.setValueAndWarp(g_oAlpha);
                 }
                 g_oAlpha = -1;
             }
